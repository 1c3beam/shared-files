PRAGMA foreign_keys=OFF;
BEGIN TRANSACTION;
CREATE TABLE IF NOT EXISTS "django_migrations" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "app" varchar(255) NOT NULL, "name" varchar(255) NOT NULL, "applied" datetime NOT NULL);
INSERT INTO django_migrations VALUES(1,'contenttypes','0001_initial','2021-03-22 18:20:08.345171');
INSERT INTO django_migrations VALUES(2,'auth','0001_initial','2021-03-22 18:20:08.490511');
INSERT INTO django_migrations VALUES(3,'admin','0001_initial','2021-03-22 18:20:08.611863');
INSERT INTO django_migrations VALUES(4,'admin','0002_logentry_remove_auto_add','2021-03-22 18:20:08.734071');
INSERT INTO django_migrations VALUES(5,'admin','0003_logentry_add_action_flag_choices','2021-03-22 18:20:08.871400');
INSERT INTO django_migrations VALUES(6,'contenttypes','0002_remove_content_type_name','2021-03-22 18:20:09.045841');
INSERT INTO django_migrations VALUES(7,'auth','0002_alter_permission_name_max_length','2021-03-22 18:20:09.181028');
INSERT INTO django_migrations VALUES(8,'auth','0003_alter_user_email_max_length','2021-03-22 18:20:09.289869');
INSERT INTO django_migrations VALUES(9,'auth','0004_alter_user_username_opts','2021-03-22 18:20:09.406599');
INSERT INTO django_migrations VALUES(10,'auth','0005_alter_user_last_login_null','2021-03-22 18:20:09.516629');
INSERT INTO django_migrations VALUES(11,'auth','0006_require_contenttypes_0002','2021-03-22 18:20:09.552744');
INSERT INTO django_migrations VALUES(12,'auth','0007_alter_validators_add_error_messages','2021-03-22 18:20:09.690861');
INSERT INTO django_migrations VALUES(13,'auth','0008_alter_user_username_max_length','2021-03-22 18:20:09.820669');
INSERT INTO django_migrations VALUES(14,'auth','0009_alter_user_last_name_max_length','2021-03-22 18:20:09.936226');
INSERT INTO django_migrations VALUES(15,'auth','0010_alter_group_name_max_length','2021-03-22 18:20:10.063521');
INSERT INTO django_migrations VALUES(16,'auth','0011_update_proxy_permissions','2021-03-22 18:20:10.143643');
INSERT INTO django_migrations VALUES(17,'auth','0012_alter_user_first_name_max_length','2021-03-22 18:20:10.378797');
INSERT INTO django_migrations VALUES(18,'docpage','0001_initial','2021-03-22 18:20:10.569619');
INSERT INTO django_migrations VALUES(19,'docpage','0002_auto_20210322_1700','2021-03-22 18:20:11.058553');
INSERT INTO django_migrations VALUES(20,'portfolio','0001_initial','2021-03-22 18:20:11.113929');
INSERT INTO django_migrations VALUES(21,'portfolio','0002_auto_20210319_0509','2021-03-22 18:20:11.201890');
INSERT INTO django_migrations VALUES(22,'portfolio','0003_project_description','2021-03-22 18:20:11.286476');
INSERT INTO django_migrations VALUES(23,'sessions','0001_initial','2021-03-22 18:20:11.344955');
INSERT INTO django_migrations VALUES(24,'docpage','0003_header_header_code','2021-03-23 14:12:07.147708');
CREATE TABLE IF NOT EXISTS "auth_group_permissions" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "group_id" integer NOT NULL REFERENCES "auth_group" ("id") DEFERRABLE INITIALLY DEFERRED, "permission_id" integer NOT NULL REFERENCES "auth_permission" ("id") DEFERRABLE INITIALLY DEFERRED);
CREATE TABLE IF NOT EXISTS "auth_user_groups" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "user_id" integer NOT NULL REFERENCES "auth_user" ("id") DEFERRABLE INITIALLY DEFERRED, "group_id" integer NOT NULL REFERENCES "auth_group" ("id") DEFERRABLE INITIALLY DEFERRED);
CREATE TABLE IF NOT EXISTS "auth_user_user_permissions" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "user_id" integer NOT NULL REFERENCES "auth_user" ("id") DEFERRABLE INITIALLY DEFERRED, "permission_id" integer NOT NULL REFERENCES "auth_permission" ("id") DEFERRABLE INITIALLY DEFERRED);
CREATE TABLE IF NOT EXISTS "django_admin_log" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "action_time" datetime NOT NULL, "object_id" text NULL, "object_repr" varchar(200) NOT NULL, "change_message" text NOT NULL, "content_type_id" integer NULL REFERENCES "django_content_type" ("id") DEFERRABLE INITIALLY DEFERRED, "user_id" integer NOT NULL REFERENCES "auth_user" ("id") DEFERRABLE INITIALLY DEFERRED, "action_flag" smallint unsigned NOT NULL CHECK ("action_flag" >= 0));
INSERT INTO django_admin_log VALUES(1,'2021-03-22 18:22:11.346668','1','Introduction to HTML','[{"added": {}}]',9,1,1);
INSERT INTO django_admin_log VALUES(2,'2021-03-22 18:22:29.002007','1','Introduction to HTML','[{"added": {}}]',10,1,1);
INSERT INTO django_admin_log VALUES(3,'2021-03-23 13:43:37.297385','1','Introduction to HTML','[{"changed": {"fields": ["P start"]}}]',9,1,2);
INSERT INTO django_admin_log VALUES(4,'2021-03-23 13:43:50.609140','1','Introduction to HTML','',10,1,3);
INSERT INTO django_admin_log VALUES(5,'2021-03-23 13:48:36.593764','2','HTML Definition','[{"added": {}}]',9,1,1);
INSERT INTO django_admin_log VALUES(6,'2021-03-23 13:52:15.873221','3','Anatomy Of An HTML Element','[{"added": {}}]',9,1,1);
INSERT INTO django_admin_log VALUES(7,'2021-03-23 13:54:21.562416','2','Anatomy Of An HTML Element','[{"added": {}}]',10,1,1);
INSERT INTO django_admin_log VALUES(8,'2021-03-23 13:56:39.114531','3','Anatomy Of An HTML Element','[{"added": {}}]',10,1,1);
INSERT INTO django_admin_log VALUES(9,'2021-03-23 13:57:58.754029','4','Anatomy Of An HTML Element','[{"added": {}}]',10,1,1);
INSERT INTO django_admin_log VALUES(10,'2021-03-23 14:02:08.581229','4','Block Versus Inline Elements','[{"added": {}}]',9,1,1);
INSERT INTO django_admin_log VALUES(11,'2021-03-23 14:03:08.177112','5','Block Versus Inline Elements','[{"added": {}}]',10,1,1);
INSERT INTO django_admin_log VALUES(12,'2021-03-23 14:03:48.042700','6','Block Versus Inline Elements','[{"added": {}}]',10,1,1);
INSERT INTO django_admin_log VALUES(13,'2021-03-23 14:04:57.212779','6','Block Versus Inline Elements','[{"changed": {"fields": ["Ul li", "Ul code"]}}]',10,1,2);
INSERT INTO django_admin_log VALUES(14,'2021-03-23 14:10:11.565311','5','Anatomy of an HTML document','[{"added": {}}]',9,1,1);
INSERT INTO django_admin_log VALUES(15,'2021-03-23 14:17:20.597445','5','Anatomy of an HTML document','[{"changed": {"fields": ["Header code"]}}]',9,1,2);
INSERT INTO django_admin_log VALUES(16,'2021-03-23 14:18:51.492149','1','Anatomy of an HTML document','[{"added": {}}]',11,1,1);
INSERT INTO django_admin_log VALUES(17,'2021-03-23 14:19:47.863664','2','Anatomy of an HTML document','[{"added": {}}]',11,1,1);
INSERT INTO django_admin_log VALUES(18,'2021-03-23 14:19:59.993803','3','Anatomy of an HTML document','[{"added": {}}]',11,1,1);
INSERT INTO django_admin_log VALUES(19,'2021-03-23 14:20:40.399672','4','Anatomy of an HTML document','[{"added": {}}]',11,1,1);
INSERT INTO django_admin_log VALUES(20,'2021-03-23 14:21:26.987477','5','Anatomy of an HTML document','[{"added": {}}]',11,1,1);
INSERT INTO django_admin_log VALUES(21,'2021-03-23 14:21:54.555556','6','Anatomy of an HTML document','[{"added": {}}]',11,1,1);
INSERT INTO django_admin_log VALUES(22,'2021-03-23 14:25:12.194040','6','HTML comments','[{"added": {}}]',9,1,1);
INSERT INTO django_admin_log VALUES(23,'2021-03-23 14:28:38.373206','7','HTML head','[{"added": {}}]',9,1,1);
INSERT INTO django_admin_log VALUES(24,'2021-03-23 14:30:58.167663','8','Adding a title','[{"added": {}}]',9,1,1);
INSERT INTO django_admin_log VALUES(25,'2021-03-23 14:31:44.115862','7','Adding a title','[{"added": {}}]',10,1,1);
INSERT INTO django_admin_log VALUES(26,'2021-03-23 14:32:10.538094','8','Adding a title','[{"added": {}}]',10,1,1);
CREATE TABLE IF NOT EXISTS "django_content_type" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "app_label" varchar(100) NOT NULL, "model" varchar(100) NOT NULL);
INSERT INTO django_content_type VALUES(1,'admin','logentry');
INSERT INTO django_content_type VALUES(2,'auth','permission');
INSERT INTO django_content_type VALUES(3,'auth','group');
INSERT INTO django_content_type VALUES(4,'auth','user');
INSERT INTO django_content_type VALUES(5,'contenttypes','contenttype');
INSERT INTO django_content_type VALUES(6,'sessions','session');
INSERT INTO django_content_type VALUES(7,'portfolio','project');
INSERT INTO django_content_type VALUES(8,'portfolio','tech');
INSERT INTO django_content_type VALUES(9,'docpage','header');
INSERT INTO django_content_type VALUES(10,'docpage','ulli');
INSERT INTO django_content_type VALUES(11,'docpage','olli');
CREATE TABLE IF NOT EXISTS "auth_permission" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "content_type_id" integer NOT NULL REFERENCES "django_content_type" ("id") DEFERRABLE INITIALLY DEFERRED, "codename" varchar(100) NOT NULL, "name" varchar(255) NOT NULL);
INSERT INTO auth_permission VALUES(1,1,'add_logentry','Can add log entry');
INSERT INTO auth_permission VALUES(2,1,'change_logentry','Can change log entry');
INSERT INTO auth_permission VALUES(3,1,'delete_logentry','Can delete log entry');
INSERT INTO auth_permission VALUES(4,1,'view_logentry','Can view log entry');
INSERT INTO auth_permission VALUES(5,2,'add_permission','Can add permission');
INSERT INTO auth_permission VALUES(6,2,'change_permission','Can change permission');
INSERT INTO auth_permission VALUES(7,2,'delete_permission','Can delete permission');
INSERT INTO auth_permission VALUES(8,2,'view_permission','Can view permission');
INSERT INTO auth_permission VALUES(9,3,'add_group','Can add group');
INSERT INTO auth_permission VALUES(10,3,'change_group','Can change group');
INSERT INTO auth_permission VALUES(11,3,'delete_group','Can delete group');
INSERT INTO auth_permission VALUES(12,3,'view_group','Can view group');
INSERT INTO auth_permission VALUES(13,4,'add_user','Can add user');
INSERT INTO auth_permission VALUES(14,4,'change_user','Can change user');
INSERT INTO auth_permission VALUES(15,4,'delete_user','Can delete user');
INSERT INTO auth_permission VALUES(16,4,'view_user','Can view user');
INSERT INTO auth_permission VALUES(17,5,'add_contenttype','Can add content type');
INSERT INTO auth_permission VALUES(18,5,'change_contenttype','Can change content type');
INSERT INTO auth_permission VALUES(19,5,'delete_contenttype','Can delete content type');
INSERT INTO auth_permission VALUES(20,5,'view_contenttype','Can view content type');
INSERT INTO auth_permission VALUES(21,6,'add_session','Can add session');
INSERT INTO auth_permission VALUES(22,6,'change_session','Can change session');
INSERT INTO auth_permission VALUES(23,6,'delete_session','Can delete session');
INSERT INTO auth_permission VALUES(24,6,'view_session','Can view session');
INSERT INTO auth_permission VALUES(25,7,'add_project','Can add project');
INSERT INTO auth_permission VALUES(26,7,'change_project','Can change project');
INSERT INTO auth_permission VALUES(27,7,'delete_project','Can delete project');
INSERT INTO auth_permission VALUES(28,7,'view_project','Can view project');
INSERT INTO auth_permission VALUES(29,8,'add_tech','Can add tech');
INSERT INTO auth_permission VALUES(30,8,'change_tech','Can change tech');
INSERT INTO auth_permission VALUES(31,8,'delete_tech','Can delete tech');
INSERT INTO auth_permission VALUES(32,8,'view_tech','Can view tech');
INSERT INTO auth_permission VALUES(33,9,'add_header','Can add header');
INSERT INTO auth_permission VALUES(34,9,'change_header','Can change header');
INSERT INTO auth_permission VALUES(35,9,'delete_header','Can delete header');
INSERT INTO auth_permission VALUES(36,9,'view_header','Can view header');
INSERT INTO auth_permission VALUES(37,10,'add_ulli','Can add ul li');
INSERT INTO auth_permission VALUES(38,10,'change_ulli','Can change ul li');
INSERT INTO auth_permission VALUES(39,10,'delete_ulli','Can delete ul li');
INSERT INTO auth_permission VALUES(40,10,'view_ulli','Can view ul li');
INSERT INTO auth_permission VALUES(41,11,'add_olli','Can add ol li');
INSERT INTO auth_permission VALUES(42,11,'change_olli','Can change ol li');
INSERT INTO auth_permission VALUES(43,11,'delete_olli','Can delete ol li');
INSERT INTO auth_permission VALUES(44,11,'view_olli','Can view ol li');
CREATE TABLE IF NOT EXISTS "auth_group" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "name" varchar(150) NOT NULL UNIQUE);
CREATE TABLE IF NOT EXISTS "auth_user" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "password" varchar(128) NOT NULL, "last_login" datetime NULL, "is_superuser" bool NOT NULL, "username" varchar(150) NOT NULL UNIQUE, "last_name" varchar(150) NOT NULL, "email" varchar(254) NOT NULL, "is_staff" bool NOT NULL, "is_active" bool NOT NULL, "date_joined" datetime NOT NULL, "first_name" varchar(150) NOT NULL);
INSERT INTO auth_user VALUES(1,'pbkdf2_sha256$216000$aaaaaaaaaaaa$G2TBNB688dq0TfempQ9h9owXZ/6mznEvYOwj31QfUWM=','2021-03-23 13:41:38.233473',1,'king','','',1,1,'2021-03-22 18:20:41.589942','');
CREATE TABLE IF NOT EXISTS "docpage_ulli" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "ul_code" text NOT NULL, "ul_header_owner_id" integer NULL REFERENCES "docpage_header" ("id") DEFERRABLE INITIALLY DEFERRED, "ul_li" text NOT NULL);
INSERT INTO docpage_ulli VALUES(2,'',3,'The opening tag: This consists of the name of the element wrapped in opening and closing angle brackets. This opening tag marks where the element begins or starts to take effect.');
INSERT INTO docpage_ulli VALUES(3,'',3,'The content: This is the content of the element.');
INSERT INTO docpage_ulli VALUES(4,'',3,'The closing tag: This is the same as the opening tag, except that it includes a forward slash before the element name. This marks where the element ends. Failing to include a closing tag is a common beginner error that can produce peculiar results.');
INSERT INTO docpage_ulli VALUES(5,'',4,'Block-level elements form a visible block on a page. A block-level element appears on a new line following the content that precedes it. Any content that follows a block-level element also appears on a new line. Block-level elements are usually structural elements on the page. For example, a block-level element might represent headings, paragraphs, lists, navigation menus, or footers. A block-level element wouldn''t be nested inside an inline element, but it might be nested inside another block-level element.');
INSERT INTO docpage_ulli VALUES(6,replace(replace('<em>first</em><em>second</em><em>third</em>\r\n\r\n<p>fourth</p><p>fifth</p><p>sixth</p>','\r',char(13)),'\n',char(10)),4,replace(replace('Inline elements are contained within block-level elements, and surround only small parts of the document’s content (not entire paragraphs or groupings of content). An inline element will not cause a new line to appear in the document. It is typically used with text, for example an <a> element creates a hyperlink, and elements such as <em> or <strong> create emphasis.\r\nConsider the following example:','\r',char(13)),'\n',char(10)));
INSERT INTO docpage_ulli VALUES(7,'',8,'The <h1> element appears on the page when loaded in the browser — generally this should be used once per page, to mark up the title of your page content (the story title, or news headline, or whatever is appropriate to your usage.)');
INSERT INTO docpage_ulli VALUES(8,'',8,'The <title> element is metadata that represents the title of the overall HTML document (not the document''s content.)');
CREATE TABLE IF NOT EXISTS "docpage_olli" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "ol_li" text NOT NULL, "ol_code" text NOT NULL, "ol_header_owner_id" integer NULL REFERENCES "docpage_header" ("id") DEFERRABLE INITIALLY DEFERRED);
INSERT INTO docpage_olli VALUES(1,'<!DOCTYPE html>: The doctype. When HTML was young (1991-1992), doctypes were meant to act as links to a set of rules that the HTML page had to follow to be considered good HTML. Doctypes used to look something like this:',replace(replace('<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"\r\n"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">','\r',char(13)),'\n',char(10)),5);
INSERT INTO docpage_olli VALUES(2,'<html></html>: The <html> element. This element wraps all the content on the page. It is sometimes known as the root element.','',5);
INSERT INTO docpage_olli VALUES(3,'<head></head>: The <head> element. This element acts as a container for everything you want to include on the HTML page, that isn''t the content the page will show to viewers. This includes keywords and a page description that would appear in search results, CSS to style content, character set declarations, and more.','',5);
INSERT INTO docpage_olli VALUES(4,'<meta charset="utf-8">: This element specifies the character set for your document to UTF-8, which includes most characters from the vast majority of human written languages. With this setting, the page can now handle any textual content it might contain. There is no reason not to set this, and it can help avoid some problems later.','',5);
INSERT INTO docpage_olli VALUES(5,'<title></title>: The <title> element. This sets the title of the page, which is the title that appears in the browser tab the page is loaded in. The page title is also used to describe the page when it is bookmarked.','',5);
INSERT INTO docpage_olli VALUES(6,'<body></body>: The <body> element. This contains all the content that displays on the page, including text, images, videos, games, playable audio tracks, or whatever else.','',5);
CREATE TABLE IF NOT EXISTS "portfolio_tech" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "tech_name" varchar(50) NOT NULL);
CREATE TABLE IF NOT EXISTS "portfolio_project_tech_use" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "project_id" integer NOT NULL REFERENCES "portfolio_project" ("id") DEFERRABLE INITIALLY DEFERRED, "tech_id" integer NOT NULL REFERENCES "portfolio_tech" ("id") DEFERRABLE INITIALLY DEFERRED);
CREATE TABLE IF NOT EXISTS "portfolio_project" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "name" varchar(200) NOT NULL, "img" varchar(300) NOT NULL, "link_to_project" varchar(300) NOT NULL, "description" text NOT NULL);
CREATE TABLE IF NOT EXISTS "django_session" ("session_key" varchar(40) NOT NULL PRIMARY KEY, "session_data" text NOT NULL, "expire_date" datetime NOT NULL);
INSERT INTO django_session VALUES('44444444444444444444444444444444','.eJxVjMsOwiAUBf-FtSFBuAIu3fsNhPtAqoYmpV01_rtt0oVuz8ycVaW8zDUtXaY0sLoqo06_G2Z6SdsBP3N7jJrGNk8D6l3RB-36PrK8b4f7d1Bzr1tNxTqIGMlStOgLOgLyVjgKueCYPbKhEkowtFnsLwIAZ-cyC3EE9fkCEvs5RA:1lOPBG:q-yNhxKane1PrOKw9e3MnpyffrAHTtTQs6fVKKzJ9OY','2021-04-05 18:21:34.733518');
INSERT INTO django_session VALUES('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa','.eJxVjMsOwiAUBf-FtSFBuAIu3fsNhPtAqoYmpV01_rtt0oVuz8ycVaW8zDUtXaY0sLoqo06_G2Z6SdsBP3N7jJrGNk8D6l3RB-36PrK8b4f7d1Bzr1tNxTqIGMlStOgLOgLyVjgKueCYPbKhEkowtFnsLwIAZ-cyC3EE9fkCEvs5RA:1lOhHu:acCp7dWFOdfq0g7lIHkfrkIFAgEpvxZlgYnF4J5Vr3c','2021-04-06 13:41:38.268784');
CREATE TABLE IF NOT EXISTS "docpage_header" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "header" varchar(200) NOT NULL, "p_end" text NOT NULL, "p_start" text NOT NULL, "header_code" text NOT NULL);
INSERT INTO docpage_header VALUES(1,'Introduction to HTML','','At its heart, HTML is a fairly simple language made up of elements, which can be applied to pieces of text to give them different meaning in a document (Is it a paragraph? Is it a bulleted list? Is it part of a table?), structure a document into logical sections (Does it have a header? Three columns of content? A navigation menu?), and embed content such as images and videos into a page.','');
INSERT INTO docpage_header VALUES(2,'HTML Definition','','HTML (Hypertext Markup Language) is not a programming language. It is a markup language that tells web browsers how to structure the web pages you visit. It can be as complicated or as simple as the web developer wants it to be. HTML consists of a series of elements, which you use to enclose, wrap, or mark up different parts of content to make it appear or act in a certain way. The enclosing tags can make content into a hyperlink to connect to another page, italicize words, and so on.','');
INSERT INTO docpage_header VALUES(3,'Anatomy Of An HTML Element','The element is the opening tag, followed by content, followed by the closing tag.','The anatomy of HTML element is:','');
INSERT INTO docpage_header VALUES(4,'Block Versus Inline Elements','<em> is an inline element. As you see below, the first three elements sit on the same line, with no space in between. On the other hand, <p> is a block-level element.','There are two important categories of elements to know in HTML: block-level elements and inline elements.','');
INSERT INTO docpage_header VALUES(5,'Anatomy of an HTML document','','Individual HTML elements aren''t very useful on their own. Next, let''s examine how individual elements combine to form an entire HTML page:',replace(replace('<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <meta charset="utf-8">\r\n    <title>My test page</title>\r\n  </head>\r\n  <body>\r\n    <p>This is my page</p>\r\n  </body>\r\n</html>','\r',char(13)),'\n',char(10)));
INSERT INTO docpage_header VALUES(6,'HTML comments','',replace(replace('HTML has a mechanism to write comments in the code. Browsers ignore comments, effectively making comments invisible to the user. The purpose of comments is to allow you to include notes in the code to explain your logic or coding. This is very useful if you return to a code base after being away for long enough that you don''t completely remember it. Likewise, comments are invaluable as different people are making changes and updates.\r\n\r\nTo write an HTML comment, wrap it in the special markers <!-- and -->. For example:','\r',char(13)),'\n',char(10)),replace(replace('<p>I''m not inside a comment</p>\r\n\r\n<!-- <p>I am!</p> -->','\r',char(13)),'\n',char(10)));
INSERT INTO docpage_header VALUES(7,'HTML head','In larger pages however, the head can get quite full. Try going to some of your favorite websites and use the developer tools to check out their head contents. Our aim here is not to show you how to use everything that can possibly be put in the head, but rather to teach you how to use the major elements that you''ll want to include in the head, and give you some familiarity. Let''s get started.','The HTML head is the contents of the <head> element — unlike the contents of the <body> element (which are displayed on the page when loaded in a browser), the head''s content is not displayed on the page. Instead, the head''s job is to contain metadata about the document. In the above example, the head is quite small:',replace(replace('<head>\r\n  <meta charset="utf-8">\r\n  <title>My test page</title>\r\n</head>','\r',char(13)),'\n',char(10)));
INSERT INTO docpage_header VALUES(8,'Adding a title','','We''ve already seen the <title> element in action — this can be used to add a title to the document. This however can get confused with the <h1> element, which is used to add a top level heading to your body content — this is also sometimes referred to as the page title. But they are different things!','');
DELETE FROM sqlite_sequence;
INSERT INTO sqlite_sequence VALUES('django_migrations',24);
INSERT INTO sqlite_sequence VALUES('django_admin_log',26);
INSERT INTO sqlite_sequence VALUES('django_content_type',11);
INSERT INTO sqlite_sequence VALUES('auth_permission',44);
INSERT INTO sqlite_sequence VALUES('auth_group',0);
INSERT INTO sqlite_sequence VALUES('auth_user',1);
INSERT INTO sqlite_sequence VALUES('docpage_ulli',8);
INSERT INTO sqlite_sequence VALUES('docpage_olli',6);
INSERT INTO sqlite_sequence VALUES('portfolio_project',0);
INSERT INTO sqlite_sequence VALUES('docpage_header',8);
CREATE UNIQUE INDEX "auth_group_permissions_group_id_permission_id_0cd325b0_uniq" ON "auth_group_permissions" ("group_id", "permission_id");
CREATE INDEX "auth_group_permissions_group_id_b120cbf9" ON "auth_group_permissions" ("group_id");
CREATE INDEX "auth_group_permissions_permission_id_84c5c92e" ON "auth_group_permissions" ("permission_id");
CREATE UNIQUE INDEX "auth_user_groups_user_id_group_id_94350c0c_uniq" ON "auth_user_groups" ("user_id", "group_id");
CREATE INDEX "auth_user_groups_user_id_6a12ed8b" ON "auth_user_groups" ("user_id");
CREATE INDEX "auth_user_groups_group_id_97559544" ON "auth_user_groups" ("group_id");
CREATE UNIQUE INDEX "auth_user_user_permissions_user_id_permission_id_14a6b632_uniq" ON "auth_user_user_permissions" ("user_id", "permission_id");
CREATE INDEX "auth_user_user_permissions_user_id_a95ead1b" ON "auth_user_user_permissions" ("user_id");
CREATE INDEX "auth_user_user_permissions_permission_id_1fbb5f2c" ON "auth_user_user_permissions" ("permission_id");
CREATE INDEX "django_admin_log_content_type_id_c4bce8eb" ON "django_admin_log" ("content_type_id");
CREATE INDEX "django_admin_log_user_id_c564eba6" ON "django_admin_log" ("user_id");
CREATE UNIQUE INDEX "django_content_type_app_label_model_76bd3d3b_uniq" ON "django_content_type" ("app_label", "model");
CREATE UNIQUE INDEX "auth_permission_content_type_id_codename_01ab375a_uniq" ON "auth_permission" ("content_type_id", "codename");
CREATE INDEX "auth_permission_content_type_id_2f476e4b" ON "auth_permission" ("content_type_id");
CREATE INDEX "docpage_ulli_ul_header_owner_id_dde42eca" ON "docpage_ulli" ("ul_header_owner_id");
CREATE INDEX "docpage_olli_ol_header_owner_id_95d3f7c5" ON "docpage_olli" ("ol_header_owner_id");
CREATE UNIQUE INDEX "portfolio_project_tech_use_project_id_tech_id_c464df77_uniq" ON "portfolio_project_tech_use" ("project_id", "tech_id");
CREATE INDEX "portfolio_project_tech_use_project_id_2a9969b0" ON "portfolio_project_tech_use" ("project_id");
CREATE INDEX "portfolio_project_tech_use_tech_id_1457778c" ON "portfolio_project_tech_use" ("tech_id");
CREATE INDEX "django_session_expire_date_a5c62663" ON "django_session" ("expire_date");
COMMIT;
